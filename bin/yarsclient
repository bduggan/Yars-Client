#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use File::Basename 'dirname';
use Clustericious::Log;

use lib join '/', File::Spec->splitdir(dirname(__FILE__)), 'lib';
use lib join '/', File::Spec->splitdir(dirname(__FILE__)), '..', 'lib';

use Yars::Client;
use Clustericious::Client::Command;
use Log::Log4perl::CommandLine (':all', ':loginit' => <<"EOT");
           log4perl.rootLogger = WARN, Screen
           log4perl.appender.Screen = Log::Log4perl::Appender::ScreenColoredLevels
           log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
           log4perl.appender.Screen.layout.ConversionPattern = [%-5p] %d %F{1} (%L) %m %n
EOT


if ($ARGV[0] and $ARGV[0] eq 'upload') {
    # Clustericious-Client attempts to load file arguments as YAML by default, but
    # not all files to upload are YAML.  This might be better fixed in Clustericious,
    # but this solution also gives a little more consistency when running with a 
    # RESTAS server.

    shift @ARGV;
    my $yc = Yars::Client->new;
    $yc->upload(@ARGV) or LOGDIE "upload failed : ".$yc->errorstring;
}
else {
    Clustericious::Client::Command->run(Yars::Client->new, @ARGV);
}

__END__

=head1 NAME

B<yarsclient> - Upload, download, and delete files to Yars.

=head1 SYNOPSIS

    # Send a file to Yars.
    yarsclient upload <filename>

    # Get the file back, write it to the current directory.
    yarsclient download <filename> <md5>

    # Put some content to somefilename.txt
    echo 'some content' | yarsclient put somefilename.txt

    # Get just the content back to stdout.
    yarsclient get <filename> <md5>

    # Delete the file from Yars.
    yarsclient remove <filename> <md5>

    # Check the status of all the yars hosts and disks.
    yarsclient servers_status

    # Check the usage of the disks, either from the configured host, or all hosts
    yarsclient disk_usage
    yarsclient disk_usage --all 1

    # Mark a disk down
    yarsclient set_status --host http://yars_host_with_f1010.nasa.gov:9309 --disk /acps/f101 --state down

    # Mark a disk up
    yarsclient set_status --host http://yars_host_with_f1010.nasa.gov:9309 --disk /acps/f101 --state up

=head1 DESCRIPTION

Command-line interface to Yars::Client.  Client for Yars.

=head1 AUTHORS

Brian Duggan, C<< <brian.duggan at nasa.gov> >>
Marty Brandon, C<< <mbrandon at sesda2.com> >>

=head1 SEE ALSO

L<Yars::Client>

L<RESTAS::Client>

L<Clustericious::Client>

=cut


